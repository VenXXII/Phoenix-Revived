{"version":3,"file":"uv.sw.js","mappings":"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","sources":["webpack://@titaniumnetwork-dev/ultraviolet/./src/uv.sw.js"],"sourcesContent":["/*globals __uv$config*/\r\n// Users must import the config (and bundle) prior to importing uv.sw.js\r\n// This is to allow us to produce a generic bundle with no hard-coded paths.\r\n\r\n/**\r\n * @type {import('./uv').UltravioletCtor}\r\n */\r\nconst Ultraviolet = globalThis.Ultraviolet;\r\n\r\nconst cspHeaders = [\r\n    'cross-origin-embedder-policy',\r\n    'cross-origin-opener-policy',\r\n    'cross-origin-resource-policy',\r\n    'content-security-policy',\r\n    'content-security-policy-report-only',\r\n    'expect-ct',\r\n    'feature-policy',\r\n    'origin-isolation',\r\n    'strict-transport-security',\r\n    'upgrade-insecure-requests',\r\n    'x-content-type-options',\r\n    'x-download-options',\r\n    'x-frame-options',\r\n    'x-permitted-cross-domain-policies',\r\n    'x-powered-by',\r\n    'x-xss-protection',\r\n];\r\nconst emptyMethods = ['GET', 'HEAD'];\r\n\r\nclass UVServiceWorker extends Ultraviolet.EventEmitter {\r\n    constructor(config = __uv$config) {\r\n        super();\r\n        if (!config.bare) config.bare = '/bare/';\r\n        if (!config.prefix) config.prefix = '/service/';\r\n        this.addresses =\r\n            typeof config.bare === 'string'\r\n                ? [new URL(config.bare, location)]\r\n                : config.bare.map((str) => new URL(str, location));\r\n        this.config = config;\r\n        /**\r\n         * @type {InstanceType<Ultraviolet['BareClient']>}\r\n         */\r\n        this.bareClient = new Ultraviolet.BareClient(this.address);\r\n    }\r\n    /**\r\n     *\r\n     * @param {Event & {request: Request}} param0\r\n     * @returns\r\n     */\r\n    async fetch({ request }) {\r\n        try {\r\n            if (!request.url.startsWith(location.origin + this.config.prefix))\r\n                return await fetch(request);\r\n\r\n            const ultraviolet = new Ultraviolet(this.config);\r\n\r\n            if (typeof this.config.construct === 'function') {\r\n                this.config.construct(ultraviolet, 'service');\r\n            }\r\n\r\n            const db = await ultraviolet.cookie.db();\r\n\r\n            ultraviolet.meta.origin = location.origin;\r\n            ultraviolet.meta.base = ultraviolet.meta.url = new URL(\r\n                ultraviolet.sourceUrl(request.url)\r\n            );\r\n\r\n            const requestCtx = new RequestContext(\r\n                request,\r\n                this,\r\n                ultraviolet,\r\n                !emptyMethods.includes(request.method.toUpperCase())\r\n                    ? await request.blob()\r\n                    : null\r\n            );\r\n\r\n            if (ultraviolet.meta.url.protocol === 'blob:') {\r\n                requestCtx.blob = true;\r\n                requestCtx.base = requestCtx.url = new URL(\r\n                    requestCtx.url.pathname\r\n                );\r\n            }\r\n\r\n            if (\r\n                request.referrer &&\r\n                request.referrer.startsWith(location.origin)\r\n            ) {\r\n                const referer = new URL(\r\n                    ultraviolet.sourceUrl(request.referrer)\r\n                );\r\n\r\n                if (\r\n                    requestCtx.headers.origin ||\r\n                    (ultraviolet.meta.url.origin !== referer.origin &&\r\n                        request.mode === 'cors')\r\n                ) {\r\n                    requestCtx.headers.origin = referer.origin;\r\n                }\r\n\r\n                requestCtx.headers.referer = referer.href;\r\n            }\r\n\r\n            const cookies = (await ultraviolet.cookie.getCookies(db)) || [];\r\n            const cookieStr = ultraviolet.cookie.serialize(\r\n                cookies,\r\n                ultraviolet.meta,\r\n                false\r\n            );\r\n\r\n            requestCtx.headers['user-agent'] = navigator.userAgent;\r\n\r\n            if (cookieStr) requestCtx.headers.cookie = cookieStr;\r\n\r\n            const reqEvent = new HookEvent(requestCtx, null, null);\r\n            this.emit('request', reqEvent);\r\n\r\n            if (reqEvent.intercepted) return reqEvent.returnValue;\r\n\r\n            const response = await this.bareClient.fetch(\r\n                requestCtx.blob\r\n                    ? 'blob:' + location.origin + requestCtx.url.pathname\r\n                    : requestCtx.url,\r\n                {\r\n                    headers: requestCtx.headers,\r\n                    method: requestCtx.method,\r\n                    body: requestCtx.body,\r\n                    credentials: requestCtx.credentials,\r\n                    mode:\r\n                        location.origin !== requestCtx.address.origin\r\n                            ? 'cors'\r\n                            : requestCtx.mode,\r\n                    redirect: requestCtx.redirect,\r\n                }\r\n            );\r\n\r\n            const responseCtx = new ResponseContext(requestCtx, response);\r\n            const resEvent = new HookEvent(responseCtx, null, null);\r\n\r\n            this.emit('beforemod', resEvent);\r\n            if (resEvent.intercepted) return resEvent.returnValue;\r\n\r\n            for (const name of cspHeaders) {\r\n                if (responseCtx.headers[name]) delete responseCtx.headers[name];\r\n            }\r\n\r\n            if (responseCtx.headers.location) {\r\n                responseCtx.headers.location = ultraviolet.rewriteUrl(\r\n                    responseCtx.headers.location\r\n                );\r\n            }\r\n\r\n            if (responseCtx.headers['set-cookie']) {\r\n                Promise.resolve(\r\n                    ultraviolet.cookie.setCookies(\r\n                        responseCtx.headers['set-cookie'],\r\n                        db,\r\n                        ultraviolet.meta\r\n                    )\r\n                ).then(() => {\r\n                    self.clients.matchAll().then(function (clients) {\r\n                        clients.forEach(function (client) {\r\n                            client.postMessage({\r\n                                msg: 'updateCookies',\r\n                                url: ultraviolet.meta.url.href,\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n                delete responseCtx.headers['set-cookie'];\r\n            }\r\n\r\n            if (responseCtx.body) {\r\n                switch (request.destination) {\r\n                    case 'script':\r\n                    case 'worker':\r\n                        {\r\n                            // craft a JS-safe list of arguments\r\n                            const scripts = [\r\n                                ultraviolet.bundleScript,\r\n                                ultraviolet.clientScript,\r\n                                ultraviolet.configScript,\r\n                                ultraviolet.handlerScript,\r\n                            ]\r\n                                .map((script) => JSON.stringify(script))\r\n                                .join(',');\r\n                            responseCtx.body = `if (!self.__uv && self.importScripts) importScripts(${scripts});\\n`;\r\n                            responseCtx.body += ultraviolet.js.rewrite(\r\n                                await response.text()\r\n                            );\r\n                        }\r\n                        break;\r\n                    case 'style':\r\n                        responseCtx.body = ultraviolet.rewriteCSS(\r\n                            await response.text()\r\n                        );\r\n                        break;\r\n                    case 'iframe':\r\n                    case 'document':\r\n                        if (\r\n                            isHtml(\r\n                                ultraviolet.meta.url,\r\n                                responseCtx.headers['content-type'] || ''\r\n                            )\r\n                        ) {\r\n                            responseCtx.body = ultraviolet.rewriteHtml(\r\n                                await response.text(),\r\n                                {\r\n                                    document: true,\r\n                                    injectHead: ultraviolet.createHtmlInject(\r\n                                        ultraviolet.handlerScript,\r\n                                        ultraviolet.bundleScript,\r\n                                        ultraviolet.clientScript,\r\n                                        ultraviolet.configScript,\r\n                                        this.bareClient.data,\r\n                                        ultraviolet.cookie.serialize(\r\n                                            cookies,\r\n                                            ultraviolet.meta,\r\n                                            true\r\n                                        ),\r\n                                        request.referrer\r\n                                    ),\r\n                                }\r\n                            );\r\n                        }\r\n                }\r\n            }\r\n\r\n            if (requestCtx.headers.accept === 'text/event-stream') {\r\n                responseCtx.headers['content-type'] = 'text/event-stream';\r\n            }\r\n\r\n            this.emit('response', resEvent);\r\n            if (resEvent.intercepted) return resEvent.returnValue;\r\n\r\n            return new Response(responseCtx.body, {\r\n                headers: responseCtx.headers,\r\n                status: responseCtx.status,\r\n                statusText: responseCtx.statusText,\r\n            });\r\n        } catch (err) {\r\n            console.error(err);\r\n            return new Response(err.toString(), {\r\n                status: 500,\r\n            });\r\n        }\r\n    }\r\n    get address() {\r\n        return this.addresses[\r\n            Math.floor(Math.random() * this.addresses.length)\r\n        ];\r\n    }\r\n    static Ultraviolet = Ultraviolet;\r\n}\r\n\r\nself.UVServiceWorker = UVServiceWorker;\r\n\r\nclass ResponseContext {\r\n    /**\r\n     *\r\n     * @param {RequestContext} request\r\n     * @param {import(\"@tomphttp/bare-client\").BareResponseFetch} response\r\n     */\r\n    constructor(request, response) {\r\n        this.request = request;\r\n        this.raw = response;\r\n        this.ultraviolet = request.ultraviolet;\r\n        this.headers = {};\r\n        // eg set-cookie\r\n        for (const key in response.rawHeaders)\r\n            this.headers[key.toLowerCase()] = response.rawHeaders[key];\r\n        this.status = response.status;\r\n        this.statusText = response.statusText;\r\n        this.body = response.body;\r\n    }\r\n    get url() {\r\n        return this.request.url;\r\n    }\r\n    get base() {\r\n        return this.request.base;\r\n    }\r\n    set base(val) {\r\n        this.request.base = val;\r\n    }\r\n}\r\n\r\nclass RequestContext {\r\n    /**\r\n     *\r\n     * @param {Request} request\r\n     * @param {UVServiceWorker} worker\r\n     * @param {Ultraviolet} ultraviolet\r\n     * @param {BodyInit} body\r\n     */\r\n    constructor(request, worker, ultraviolet, body = null) {\r\n        this.ultraviolet = ultraviolet;\r\n        this.request = request;\r\n        this.headers = Object.fromEntries(request.headers.entries());\r\n        this.method = request.method;\r\n        this.address = worker.address;\r\n        this.body = body || null;\r\n        this.redirect = request.redirect;\r\n        this.credentials = 'omit';\r\n        this.mode = request.mode === 'cors' ? request.mode : 'same-origin';\r\n        this.blob = false;\r\n    }\r\n    get url() {\r\n        return this.ultraviolet.meta.url;\r\n    }\r\n    set url(val) {\r\n        this.ultraviolet.meta.url = val;\r\n    }\r\n    get base() {\r\n        return this.ultraviolet.meta.base;\r\n    }\r\n    set base(val) {\r\n        this.ultraviolet.meta.base = val;\r\n    }\r\n}\r\n\r\nfunction isHtml(url, contentType = '') {\r\n    return (\r\n        (\r\n            Ultraviolet.mime.contentType(contentType || url.pathname) ||\r\n            'text/html'\r\n        ).split(';')[0] === 'text/html'\r\n    );\r\n}\r\n\r\nclass HookEvent {\r\n    #intercepted;\r\n    #returnValue;\r\n    constructor(data = {}, target = null, that = null) {\r\n        this.#intercepted = false;\r\n        this.#returnValue = null;\r\n        this.data = data;\r\n        this.target = target;\r\n        this.that = that;\r\n    }\r\n    get intercepted() {\r\n        return this.#intercepted;\r\n    }\r\n    get returnValue() {\r\n        return this.#returnValue;\r\n    }\r\n    respondWith(input) {\r\n        this.#returnValue = input;\r\n        this.#intercepted = true;\r\n    }\r\n}\r\n"],"names":["Ultraviolet","globalThis","cspHeaders","emptyMethods","UVServiceWorker","EventEmitter","constructor","config","__uv$config","super","bare","prefix","this","addresses","URL","location","map","str","bareClient","BareClient","address","async","request","url","startsWith","origin","fetch","ultraviolet","construct","db","cookie","meta","base","sourceUrl","requestCtx","RequestContext","includes","method","toUpperCase","blob","protocol","pathname","referrer","referer","headers","mode","href","cookies","getCookies","cookieStr","serialize","navigator","userAgent","reqEvent","HookEvent","emit","intercepted","returnValue","response","body","credentials","redirect","responseCtx","ResponseContext","resEvent","name","rewriteUrl","Promise","resolve","setCookies","then","self","clients","matchAll","forEach","client","postMessage","msg","destination","scripts","bundleScript","clientScript","configScript","handlerScript","script","JSON","stringify","join","js","rewrite","text","rewriteCSS","contentType","mime","split","isHtml","rewriteHtml","document","injectHead","createHtmlInject","data","accept","Response","status","statusText","err","console","error","toString","Math","floor","random","length","static","raw","key","rawHeaders","toLowerCase","val","worker","Object","fromEntries","entries","target","that","respondWith","input"],"sourceRoot":""}